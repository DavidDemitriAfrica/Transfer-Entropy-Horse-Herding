library('tidyverse')
library('ggplot2')
library("readxl")
library("gganimate")
library("lmtest")
library("qpcR")
library(RTransferEntropy)
library(lsa)
library(igraph)
library(dplyr)
library(ggpubr)
library("rinform")
library(reshape2)
library("patchwork")
setwd("C:/Users/David Africa/Masters Code Stuff/Horses with JP")
rename_columns <- function(df) {
col_names <- names(df)
new_col_names <- col_names
# Always rename the first column to `Time (s)`
new_col_names[1] <- "Time (s)"
# Loop through the column names and apply renaming logic
for (i in seq_along(col_names)) {
if (i %% 2 == 0 && i > 1) { # For even columns (assumed to be x-coordinates)
base_name <- gsub(" ", "_", tolower(col_names[i]))
new_col_names[i] <- paste0(base_name, "_x")
} else if (i %% 2 == 1 && i > 2) { # For odd columns (assumed to be y-coordinates)
base_name <- gsub(" ", "_", tolower(col_names[i-1]))
new_col_names[i] <- paste0(base_name, "_y")
}
}
# Set the new column names
names(df) <- new_col_names
return(df)
}
folder_path <- "data/herding_only"
# List all Excel files in the directory
excel_files <- list.files(path = folder_path, pattern = "\\.xlsx$", full.names = TRUE)
# Read each Excel file into a list of data frames
list_of_dfs <- lapply(excel_files, read_excel)
# Optionally, if you want to name the list elements based on the file names (without path and extension)
names(list_of_dfs) <- sapply(excel_files, function(x) tools::file_path_sans_ext(basename(x)))
list_of_dfs_renamed <- lapply(list_of_dfs, rename_columns)
bin_and_summarize <- function(df) {
df %>%
mutate(discretized_time = cut(`Time (s)`, breaks = seq(floor(min(`Time (s)`)), ceiling(max(`Time (s)`)), by = 0.25), include.lowest = TRUE, labels = FALSE)) %>%
group_by(discretized_time) %>%
summarize(across(everything(), mean, na.rm = TRUE), .groups = "drop")
}
list_of_dfs_binned <- lapply(list_of_dfs_renamed, bin_and_summarize)
plot_movement <- function(df, entities) {
p <- ggplot() +
labs(title = "Horses' Movements",
x = "X-coordinate",
y = "Y-coordinate") +
theme_minimal()
for (entity in entities) {
x_col <- paste0(entity, "_x")
y_col <- paste0(entity, "_y")
p <- p + geom_point(data = df, aes_string(x = x_col, y = y_col, color = sprintf('"%s"', entity)), size = 2)
}
return(p)
}
# Specify the entities you want to plot
entities <- c("kobe", "tarumi", "bato_1", "bato_2", "himeji", "maiko", "kakogawa", "akashi", "uji")
# Plot for herding data
plot_movement(herding_data_binned, entities)
# Plot for herding data
plot_movement(herding_data_binned, entities)
calculate_velocity <- function(df, dt = 0.25) {
velocity_df <- data.frame(matrix(NA, ncol = 0, nrow = nrow(df)))
for (i in seq(1, ncol(df), by = 2)) {
x_col <- i
y_col <- i + 1
dx <- c(0, diff(df[[x_col]]))
dy <- c(0, diff(df[[y_col]]))
velocity_df[paste0("velocity_", names(df)[x_col])] <- dx / dt
velocity_df[paste0("velocity_", names(df)[y_col])] <- dy / dt
}
return(velocity_df)
}
list_of_dfs_velocity <- lapply(list_of_dfs_binned, calculate_velocity)
compute_speed <- function(velocity_df) {
# Initialize an empty list to store speed calculations
speed_list <- list()
# Iterate over each pair of velocity columns (x and y) to calculate speed
for (i in seq(1, ncol(velocity_df), by = 2)) {
# Extract the column names for x and y velocities
x_vel_col_name <- names(velocity_df)[i]
y_vel_col_name <- names(velocity_df)[i + 1]
# Calculate speed from x and y velocities
speed <- sqrt(velocity_df[[x_vel_col_name]]^2 + velocity_df[[y_vel_col_name]]^2)
# Generate a new column name for speed based on the entity's name
# Assumes velocity column names are in the format "velocity_ENTITY_x" and "velocity_ENTITY_y"
entity_name <- gsub("velocity_(.*)_x", "\\1", x_vel_col_name)
speed_col_name <- paste0(entity_name, "_speed")
# Add the speed calculation to the list with the appropriate column name
speed_list[[speed_col_name]] <- speed
}
# Convert the list of speed calculations into a dataframe
speed_df <- as.data.frame(speed_list)
return(speed_df)
}
list_of_dfs_speed <- lapply(list_of_dfs_velocity, compute_speed)
compute_transfer_entropy_matrix <- function(speed_df) {
n <- ncol(speed_df)
matrixinp <- matrix(data = NA, nrow = n, ncol = n)
colnames(matrixinp) <- colnames(speed_df)
rownames(matrixinp) <- colnames(speed_df)
for (i in 1:n) {
for (j in 1:n) {
matrixinp[i, j] <- RTransferEntropy::transfer_entropy(speed_df[[i]], speed_df[[j]], lx = 2, ly = 2, nboot = 0)$coef[1]
}
}
return(round(matrixinp, 2))
}
list_of_temats <- lapply(list_of_dfs_speed, compute_transfer_entropy_matrix)
generate_transfer_entropy_heatmap <- function(temat, title = "Transfer Entropy Heatmap") {
# Exclude specific rows and columns
exclude_vars <- c("bato_2_speed", "bato_1_speed", "velocity_discretized_time_speed")
filtered_temat <- temat[!(rownames(temat) %in% exclude_vars), !(colnames(temat) %in% exclude_vars)]
melted_temat <- melt(filtered_temat)
ggheatmap <- ggplot(data = melted_temat, aes(x = Var2, y = Var1, fill = value)) +
ggtitle(title) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-0.35, 0.35), space = "Lab",
name = "Transfer Entropy") +
theme_minimal() + # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 9, hjust = 1),
axis.text.y = element_text(size = 9)) +
coord_fixed() +
geom_text(aes(Var2, Var1, label = sprintf("%.2f", value)), color = "black", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.direction = "vertical"
) +
guides(fill = guide_colorbar(barwidth = 1, barheight = 5,
title.position = "right", title.hjust = 0.5))
return(ggheatmap)
}
list_of_heatmap_plots <- lapply(list_of_temats, generate_transfer_entropy_heatmap)
list_of_heatmap_plots
list_of_dfs_speed[[8]]
list_of_temats[[8]]
list_of_dfs_speed[[8]]
compute_transfer_entropy_matrix(list_of_dfs_speed[[8]])
list_of_heatmap_plots <- lapply(list_of_temats, names(list_of_dfs), generate_transfer_entropy_heatmap)
list_of_heatmap_plots <- lapply(list_of_temats, generate_transfer_entropy_heatmap, names(list_of_dfs))
list_of_heatmap_plots
names(list_of_temats)
names(list_of_temats[[1]])
name(list_of_temats[[1]])
names(list_of_temats[[1]])
names(list_of_temats)
names(list_of_temats)[[1]]
list_of_heatmap_plots <- list()
list_of_heatmap_plots <- list()
for (idx in 1:length(list_of_temats)) {
append(list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
}
list_of_heatmap_plots
for (idx in 1:length(list_of_temats)) {
append(list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
}
list_of_heatmap_plots
for (idx in 1:len(list_of_temats)) {
append(list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
}
length(list_of_temats)
for (idx in 1:length(list_of_temats)) {
append(list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[idx], names(list_of_temats)[idx]))
}
for (idx in 1:length(list_of_temats)) {
append(list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
}
for (idx in 1:length(list_of_temats)) {
list_of_heatmap_plots <- append(list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
}
list_of_heatmap_plots
for (plot in list_of_heatmap_plots){
print(plot)
}
list_of_temats[[1]]
generate_transfer_entropy_heatmap(list_of_temats[[1]], names(list_of_temats)[[1]])
for (plot in list_of_heatmap_plots){
plot
}
for (plot in list_of_heatmap_plots){
plot
}
list_of_heatmap_plots
# Assuming list_of_heatmap_plots contains your plots
for (plot in list_of_heatmap_plots) {
print(plot)
}
generate_transfer_entropy_heatmap(list_of_temats[[1]], names(list_of_temats)[[1]])
list_of_heatmap_plots <- generate_transfer_entropy_heatmap(list_of_temats[[1]], names(list_of_temats)[[1]])
for (idx in 2:length(list_of_temats)) {
list_of_heatmap_plots <- append(list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
}
for (plot in list_of_heatmap_plots){
plot
}
for (plot in list_of_heatmap_plots){
print(plot)
}
lapply(list_of_heatmap_plots, print)
View(list_of_heatmap_plots)
list_of_heatmap_plots <- generate_transfer_entropy_heatmap(list_of_temats[[1]], names(list_of_temats)[[1]])
for (idx in 2:length(list_of_temats)) {
list_of_heatmap_plots[[idx]] = list_of_heatmap_plots, generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
for (idx in 2:length(list_of_temats)) {
list_of_heatmap_plots[[idx]] = generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]]))
for (idx in 2:length(list_of_temats)) {
list_of_heatmap_plots[[idx]] = generate_transfer_entropy_heatmap(list_of_temats[[idx]], names(list_of_temats)[[idx]])
}
for (plot in list_of_heatmap_plots){
print(plot)
}
for (plot in list_of_heatmap_plots){
print(plot)
}
